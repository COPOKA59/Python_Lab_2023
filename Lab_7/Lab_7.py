import numpy as np
import pandas as pd

if __name__ == '__main__':
    # 0
    """
    Данная таблица содержит описание mcc-кодов транзакций.
    mcc_code – mcc-код транзакции;
    mcc_description — описание mcc-кода транзакции;
    """
    tr_mcc_codes = pd.read_csv('data/tr_mcc_codes.csv', encoding = 'utf-8', sep = ';')
    """
    Данная таблица содержит описание типов транзакций.
    tr_type – тип транзакции;
    tr_description — описание типа транзакции;
    """
    tr_types = pd.read_csv('data/tr_types.csv', encoding = 'utf-8', sep = ';')

    """
    Данная таблица содержит информацию по полу для части клиентов, для которых он известен. Для остальных клиентов пол неизвестен.
    customer_id — идентификатор клиента;
    gender — пол клиента;
    """
    gender_train = pd.read_csv('data/gender_train.csv', encoding = 'utf-8', sep = ',')

    """
    Таблица содержит историю транзакций клиентов банка за один год и три месяца.
    customer_id — идентификатор клиента;
    tr_datetime — день и время совершения транзакции (дни нумеруются с начала данных);
    mcc_code — mcc-код транзакции;
    tr_type — тип транзакции;
    amount — сумма транзакции в условных единицах со знаком; + — начисление средств клиенту (приходная транзакция), - — списание средств (расходная транзакция);
    term_id — идентификатор терминала.
    """
    transactions = pd.read_csv('data/transactions.csv', encoding = 'utf-8', sep = ',', nrows=1000000)

    #print(transactions)

    # Task 5
    # В tr_types выберите произвольные 100 строк с помощью метода sample
    #       (указав при этом random_seed равный 242)
    np.random.seed(242)
    # Выбор произвольных 100 строк
    tr_100 = tr_types.sample(100)
    print('Выбор произвольных 100 строк ->\n', tr_100)
    # В полученной на предыдущем этапе подвыборке найдите долю наблюдений
    #       (стобец tr_description), в которой содержится подстрока 'плата'
    #       (в любом регистре). (*)
    # .str.match() — используется для определения, соответствует ли каждая строка в базах данных данного объекта series регулярному выражению
    # 'плата' — выражение, по которому будет производится поиск
    # case=False — игнорирует изменения регистра
    tr_1 = tr_100['tr_description'][tr_100['tr_description'].str.match('плата', case=False)].count()/len(tr_100)
    print(f"\nДоля наблюдений, в которой содержится подстрока 'плата' ->\n{tr_1:.2f}\n")

    # Task 6
    # Для поля tr_type датафрейма transactions посчитайте частоту встречаемости
    #       всех типов транзакций tr_type в transactions.
    # .value_counts() — Возвращает ряд, содержащий частоту каждой отдельной строки в Dataframe
    transaction_counts = transactions["tr_type"].value_counts()
    print('\nДля поля tr_type датафрейма transactions посчитайте частоту встречаемости'
          '\nвсех типов транзакций tr_type в transactions ->\n', transaction_counts)

    # Из перечисленных вариантов выберите те, которые попали в топ-5 транзакций
    #       по частоте встречаемости.
    # .head(5) — возвращает первые 5 значений
    transaction_counts = transaction_counts.head(5)
    mask = transaction_counts.index.to_list()
    transaction_5 = tr_types.loc[tr_types['tr_type'].isin(mask)]
    print('\nТранзакцие попавшие в топ 5 по встречаемости ->\n', transaction_5)

    # Выберите все верные пункты:
    # - 1) Выдача наличных в АТМ Сбербанк России
    # - 2) Комиссия за обслуживание ссудного счета
    # - 3) Списание по требованию
    # - 4) Оплата услуги. Банкоматы СБ РФ
    # - 5) Погашение кредита (в пределах одного филиала)
    # - 6) Покупка. POS ТУ СБ РФ
    # 1 4 6

    # Task 7


